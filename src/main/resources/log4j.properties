###
# Log4j由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式.
#	1-日志信息的优先级从高到低有ERROR、WARN、 INFO、DEBUG，分别用来指定这条日志信息的重要程度；
#	2-日志信息的输出目的地指定了日志将打印到控制台还是文件中；
#	3-输出格式则控制了日志信息的显 示内容。
#  Log4j支持两种配置文件格式，一种是XML格式的文件，一种是Java特性文件（键=值）。

#配置根logger,其语法为：log4j.rootLogger = [level], appenderName, appenderName...
#	level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
#	Log4j建议只使用四个级别，优 先级从高到低分别是ERROR、WARN、INFO、DEBUG
#	appenderName就是指日志信息输出到哪个地方。您可以同时指定多个输出目的地
####
log4j.rootLogger = debug,stdout,D,E,MinuteFile

# 配置日志信息输出目的地Appender,语法为：
#	log4j.appender.appenderName = fully.qualified.name.of.appender.class  
#	log4j.appender.appenderName.option1 = value1  
#	…  
#	log4j.appender.appenderName.option = valueN
#
# Log4j提供的appender有以下几种：
#	org.apache.log4j.ConsoleAppender（控制台），  
#   org.apache.log4j.FileAppender（文件），  
#   org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
#   org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），  
#   org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
# Log4j提供的layout有以下几种：
#	org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#	org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
# Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： 
#	%m 输出代码中指定的消息
#	%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
#	%r 输出自应用启动到输出该log信息耗费的毫秒数  
#	%c 输出所属的类目，通常就是所在类的全名  
#	%t 输出产生该日志事件的线程名  
#	%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#	%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
#	%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = com.log4j.ExtPatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-p] %d{yyyy-MM-dd HH:mm:ss,SSS} [%T]-%l %m%n

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = E://logs/log4j/log.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 错误级别日志 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =E://logs/log4j/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 每分钟产生一个文件 ###
log4j.appender.MinuteFile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.MinuteFile.File =E://logs/log4j/MinuteFile.log 
log4j.appender.MinuteFile.Append = true
log4j.appender.MinuteFile.DatePattern = '.'yyyy-MM-dd_HH_mm
log4j.appender.MinuteFile.Threshold = debug 
log4j.appender.MinuteFile.layout = org.apache.log4j.PatternLayout
log4j.appender.MinuteFile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n